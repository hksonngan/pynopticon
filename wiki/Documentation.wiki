#summary Tutorials on Pynopticon for using the GUI, the library and developing your own Pynopticon modules.

= For Beginners - Tutorial on using the GUI to build a quick object recognition pipeline. =

Make sure you have Pynopticon and Orange installed correctly and linked the two together (read the [Installation] instructions). For the theoretical background on what each step in the pipeline does read the [Introduction].

 * From the toolbar choose the tab titled _Pynopticon_.
 * First, we need an input module to load some data to be processed - drag the widget _!ImageLoader _ onto the workspace.
 * Next, we want to choose which data we want our classifier to train on - double click on the new _!ImageLoader _ widget on the workspace.
 * For testing purposes lets choose a predefined dataset - click on the button _Load Dataset _ in the _!ImageLoader _ widget.
 * Select the file called _Caltech_small.xml_ and click on _Open_.
 * You can see two new categories, you can click on them and see the individual images, if you double click on them the image gets displayed.
 * Next we want to extract some features - drag the _SIFT_ widget onto the workspace.
 * Since we want to extract the features from our dataset click and hold on the little square on the right of the _!ImageLoader _ widget. You can now connect the output of this widget to input of the _SIFT_ widget by moving the line to the little square on the left of the _SIFT_ widget. 
 * Note that neither any images are loaded nor any computations are performed since the data is not yet needed anywhere.
 * As the next step we want to perform clustering - drag the _K-Means_ widget onto the workspace.
 * Double click on the new _K-Means_ widget - you can make several choices here, we want to increase the number of clusters a little, so set that parameter to 500. Normally, we do not need to cluster over _all_ the data, so set the subsample parameter to 0.5 so that we use 50% of the feature descriptors.
 * Connect the _SIFT_ widget to the _K-Means_ widget.
 * In the next step we want to quantize the feature descriptors - draw the _Quantize_ widget into the workplace.
 * This widget needs two inputs, the cluster centers (aka codebook) and the descriptors. Connect the _K-Means_ and the _SIFT_ widget to the _Quantize_ widget.
 * Next pull the _Histogram_ widget onto the workplace, double click and set the number of bins to the number of clusters (500).
 * Connect the _Quantize_ widget to the _Histogram_ widget.
 * We now have a complete feature extraction pipeline.
 * In order to train an Orange classifier we first have to convert the data to Orange's format. This is done by the _!SlotToExampleTable _ widget, pull it onto the workspace. This widget needs to inputs, the histograms from the _Histogram_ widget and the labels of the data from the _!ImageLoader _ widget, connect them!
 * After you made the final connection the program should start computing because in order to create the Orange datatable we need all the data processed. This can take a while (depending on your input data) as there are a lot of expensive computations taking place so you can probably have a coffee. Note, that eventhough we have to compute features of *every* image, Pynopticon does only store one image at a time in memory.
 * After the data is computed you can now train a classifier, go to the _Classifier_ tab and drag the _Decision Tree_ widget onto the workspace and connect the _!SlotToExampleTable _ widget to the _Decision Tree_ widget. The percentage bar above the classifier shows you that it is training.
 * In order to see how well you trained your classifier you can choose from the _Evaluation_ tab the _!TestLearners _ widget and draw it onto the workspace. Connect the _Decision Tree_ widget and the _!SlotToExampleTable _ to the _!TestLearners _ widget.
 * If you double click on the _!TestLearners _ widget you can see in the table on the right under C the percentage of correctly classified images.
 * Congratulations, you just trained your first object recognition classifier!


= For Advanced Users - Examples on how to use Pynopticon without a GUI. =

The complete feature extraction pipeline described in the _Beginners_ section can also be realized without the GUI and built into your custom Python program. Here is an example program realizing all the steps from above (without the classification) that should be rather self explanatory if you read the above tutorial!

Taken from example.py:
{
import pynopticon as pnc
import os.path

def example():
    #######################################
    # Create different objects
    #######################################
    
    # Create the ImageLoader object
    imgLoader = pnc.ImageDataset.ImageDataset()
    # Load a predefined dataset from an XML file
    imgLoader.loadFromXML(os.path.join(pnc.__path__[0], "datasets", "GarfieldBarrel.xml"))
    # Since we are finished with out dataset we call prepare()
    imgLoader.prepare()
    
    # Create a feature extractor (in this case the sift extractor using the Valedi implemenatation
    sift = pnc.features.SiftValedi()

    # Create a kmeans-cluster object and set numClusters=50 (50 cluster centroids)
    kmeans = pnc.cluster.Kmeans(numClusters=50)

    # Create a Quantization object
    quant = pnc.cluster.Quantize()

    # Create a Histogram object to bin the descriptors later on using 50 bins
    # (one for every cluster)
    histo = pnc.histogram.Histogram(bins=50)

    #######################################
    # Connect the objects via slots
    #######################################
    pnc.connect(imgLoader.outputSlotTrain, sift.inputSlot)
    pnc.connect(sift.outputSlot, kmeans.inputSlot)
    pnc.connect(sift.outputSlot, quant.inputSlotVec)
    pnc.connect(kmeans.outputSlot, quant.inputSlotCodebook)
    pnc.connect(quant.outputSlot, histo.inputSlot)

    ###############################################
    # Get the histograms as a list of numpy arrays
    ###############################################
    histograms = list(histo.outputSlot)
}
= For Developers - Documentation and a tutorial on how to create your own widgets. =

Creating your own modules to be used in the Pynopticon framework is quite simple. In general, you define input and output slots and your processing function. All the communication with the other widgets, connection handling and lazy evaluation is done in the background.

*Additional user provided modules are highly welcome, so if you create a new module send it so that we can include it in the next release!*

Here is an example program that should be self explanatory:

== For Beginners ==

== For Advanced Users ==

== For Developers ==