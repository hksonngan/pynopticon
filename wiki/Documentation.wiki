#summary Tutorials on Pynopticon for using the GUI, the library and developing your own Pynopticon modules.

* For Beginners - Tutorial on using the GUI to build a quick object recognition pipeline.

Make sure you have Pynopticon and Orange installed correctly and linked the two together (read the [Installation] instructions). For the theoretical background on what each step in the pipeline does read the [Introduction].

 * From the toolbar choose the tab titled _Pynopticon_.
 * First, we need an input module to load some data to be processed - drag the widget _!ImageLoader _ onto the workspace.
 * Next, we want to choose which data we want our classifier to train on - double click on the new _!ImageLoader _ widget on the workspace.
 * For testing purposes lets choose a predefined dataset - click on the button _Load Dataset _ in the _!ImageLoader _ widget.
 * Select the file called _Caltech_small.xml_ and click on _Open_.
 * You can see two new categories, you can click on them and see the individual images, if you double click on them the image gets displayed.
 * Next we want to extract some features - drag the _SIFT_ widget onto the workspace.
 * Since we want to extract the features from our dataset click and hold on the little square on the right of the _!ImageLoader _ widget. You can now connect the output of this widget to input of the _SIFT_ widget by moving the line to the little square on the left of the _SIFT_ widget. 
 * Note that neither any images are loaded nor any computations are performed since the data is not yet needed anywhere.
 * As the next step we want to perform clustering - drag the _K-Means_ widget onto the workspace.
 * Double click on the new _K-Means_ widget - you can make several choices here, we want to increase the number of clusters a little, so set that parameter to 500. Normally, we do not need to cluster over _all_ the data, so set the subsample parameter to 0.5 so that we use 50% of the feature descriptors.
 * Connect the _SIFT_ widget to the _K-Means_ widget.
 * In the next step we want to quantize the feature descriptors - draw the _Quantize_ widget into the workplace.
 * This widget needs two inputs, the cluster centers (aka codebook) and the descriptors. Connect the _K-Means_ and the _SIFT_ widget to the _Quantize_ widget.
 * Next pull the _Histogram_ widget onto the workplace, double click and set the number of bins to the number of clusters (500).
 * Connect the _Quantize_ widget to the _Histogram_ widget.
 * We now have a complete feature extraction pipeline.
 * In order to train an Orange classifier we first have to convert the data to Orange's format. This is done by the _SlotToExampleTable_ widget, pull it onto the workspace. This widget needs to inputs, the histograms from the _Histogram_ widget and the labels of the data from the _ImageLoader_ widget, connect them!
 * After you made the final connection the program should start computing because in order to create the Orange datatable we need all the data processed. This can take a while (depending on your input data) as there are a lot of expensive computations taking place so you can probably have a coffee. Note, that eventhough we have to compute features of *every* image, Pynopticon does only store one image at a time in memory.
 


* For Advanced Users - Examples on how to use Pynopticon without a GUI.

* For Developers - Documentation and a tutorial on how to create your own widgets.


== For Beginners ==

== For Advanced Users ==

== For Developers ==