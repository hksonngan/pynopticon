/** @internal
 ** @file   ikmeans_init.tc
 ** @author Andrea Vedaldi
 ** @brief  Integer K-Means - Initialization - Definition
 **/

/* pairs are used to generate random permutations of data */
typedef struct
{
  int w;
  int j;
} pair_t;

int cmp_pair (void const *a, void const *b)
{
  pair_t *pa = (pair_t *) a;
  pair_t *pb = (pair_t *) b;
  return pa->w - pb->w;
}

/** @internal
 ** @brief Helper function to allocate memory for an IKM quantizer
 ** @param f quantizer.
 ** @param M data dimensionality.
 ** @param K number of clusters.
 **/

static void alloc (VlIKMFilt *f, int M, int K)
{
  if (f-> centers) vl_free (f-> centers) ;
  f-> K = K ;
  f-> M = M ;  
  f-> centers = vl_malloc (sizeof(vl_ikm_acc) * M * K) ;
}


/** @brief Helper function to initialize the quantizer
 ** @param f IKM quantizer.
 **/

static
void vl_ikm_init_helper (VlIKMFilt *f)
{
  switch (f-> method) {
  case VL_IKM_LLOYD:  vl_ikm_init_lloyd (f) ; break ;
  case VL_IKM_ELKAN:  vl_ikm_init_elkan (f) ; break ;
  }
}

/** @brief Inintialize quantizer with centers
 ** @param f       IKM quantizer.
 ** @param centers centers.
 ** @param M       data dimensionality.
 ** @param K       number of clusters.
 **/

void
vl_ikm_init (VlIKMFilt* f, vl_ikm_acc const * centers, int M, int K)
{
  alloc (f, M, K) ;

  memcpy (f-> centers, centers, sizeof(vl_ikm_acc) * M * K) ;

  vl_ikm_init_helper (f) ;
}

/** @brief Inintialize quantizer with random centers
 ** @param f IKM quantizer.
 ** @param M data dimensionality.
 ** @param K number of clusters.
 **/

void
vl_ikm_init_rand (VlIKMFilt* f, int M, int K)
{
  int k, i ;

  alloc (f, M, K) ;
  
  for (k = 0 ; k < K ; ++ k) {
    for (i = 0 ; i < M ; ++ i) {
      f-> centers [k * M + i] = (vl_ikm_acc) ((vl_ikm_data) rand ()) ;
    }
  }
  
  vl_ikm_init_helper (f) ;
}

/** @brief Inintialize with centers from random data
 ** @param f IKM quantizer.
 ** @param data data.
 ** @param M data dimensionality.
 ** @param N number of data.
 ** @param K number of clusters.
 **/

void
vl_ikm_init_rand_data (VlIKMFilt* f, vl_ikm_data const* data, int M, int N, int K)
{
  int i, j, k ;
  pair_t  *pairs = (pair_t *) vl_malloc (sizeof(pair_t) * N);
  
  alloc (f, M, K) ;
  
  /* permute the data randomly */
  for (j = 0 ; j < N ; ++j) {
    pairs[j].j = j ;
    pairs[j].w = rand () ;
  }
  
  qsort (pairs, N, sizeof(pair_t), cmp_pair);
  
  /* initialize centers from random data points */
  for (k = 0 ; k < K ; ++ k) {
    for (i = 0 ; i < M ; ++ i) {
      f-> centers [k * M + i] = data [pairs[k].j * M + i] ;
    }
  }  
  
  vl_free (pairs) ;

  vl_ikm_init_helper (f) ;
}

/* 
 * Local Variables: *
 * mode: C *
 * End: *
 */
